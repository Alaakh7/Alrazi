// <auto-generated />
using System;
using Alrazi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Alrazi.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240918071235_addStudentStatus")]
    partial class addStudentStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Alrazi.Models.AccessChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessChannels");
                });

            modelBuilder.Entity("Alrazi.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Alrazi.Models.BehavioralProblem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BehavioralProblems");
                });

            modelBuilder.Entity("Alrazi.Models.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConfigKey")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("Alrazi.Models.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Alrazi.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Alrazi.Models.EmployeePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePermissions");
                });

            modelBuilder.Entity("Alrazi.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Alrazi.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AccessDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AgeTimeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<string>("DiagnosisNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyBio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateNumber")
                        .HasColumnType("int");

                    b.Property<int>("StudentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StudyStateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccessChannelId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("NationalityId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Alrazi.Models.StudentAbility", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("ContinuousTraining")
                        .HasColumnType("bit");

                    b.Property<int>("Focus")
                        .HasColumnType("int");

                    b.Property<bool>("IsQualified")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonContinuousTraining")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RehabilitationSystem")
                        .HasColumnType("int");

                    b.Property<bool>("WeaknessCalc")
                        .HasColumnType("bit");

                    b.Property<bool>("WeaknessRead")
                        .HasColumnType("bit");

                    b.Property<bool>("WeaknessSciences")
                        .HasColumnType("bit");

                    b.Property<bool>("WeaknessWrite")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("StudentAbilities");
                });

            modelBuilder.Entity("Alrazi.Models.StudentAcademic", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("LoveSchool")
                        .HasColumnType("bit");

                    b.Property<string>("MovingSchoolInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonFailure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplayInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopStudyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentAcademics");
                });

            modelBuilder.Entity("Alrazi.Models.StudentAutonomy", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Cleanliness")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clothes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Food")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentAutonomies");
                });

            modelBuilder.Entity("Alrazi.Models.StudentDevelopment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Breastfeeding")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChewingFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstWords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Immunity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teething")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Walking")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentDevelopments");
                });

            modelBuilder.Entity("Alrazi.Models.StudentEducationalَualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rehabilitation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RehabilitationAxes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentEducationals");
                });

            modelBuilder.Entity("Alrazi.Models.StudentFamilyActivity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FamilyVisits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandlingMoney")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteractCelebrations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipParents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipSiblings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WatchingTV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentFamilyActivities");
                });

            modelBuilder.Entity("Alrazi.Models.StudentFamilyInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BrotherAndSisterCount")
                        .HasColumnType("int");

                    b.Property<int>("ChildOrder")
                        .HasColumnType("int");

                    b.Property<int?>("ChildResidence")
                        .HasColumnType("int");

                    b.Property<string>("DisabilityOfRelative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherAndMotherDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherAndMotherDiseases")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FatherBirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MotherAgeAtBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MotherBirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherJob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipWithDisabled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SeparatedParents")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("StudentFamilyInfos");
                });

            modelBuilder.Entity("Alrazi.Models.StudentInterests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Interests")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentInterests");
                });

            modelBuilder.Entity("Alrazi.Models.StudentLevelInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Level1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLevelInfos");
                });

            modelBuilder.Entity("Alrazi.Models.StudentMedical", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("HeadInjury")
                        .HasColumnType("bit");

                    b.Property<bool>("SevereInfections")
                        .HasColumnType("bit");

                    b.Property<string>("Tests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VaccineRelatedProblems")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("StudentMedicals");
                });

            modelBuilder.Entity("Alrazi.Models.StudentMedicalTest", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AudiogramType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AudiogramTypeResult")
                        .HasColumnType("int");

                    b.Property<string>("BrainScan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrainScanResult")
                        .HasColumnType("int");

                    b.Property<string>("CurrentMedications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorDiagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EyeExamination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EyeExaminationResult")
                        .HasColumnType("int");

                    b.Property<string>("LaboratoryTests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousMedications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentMedicalTests");
                });

            modelBuilder.Entity("Alrazi.Models.StudentMistake", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AssaultsOthers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BehavioralDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClearExpression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompareColleagues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolDealing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelfReliant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnderstandingWellBehaved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentMistakes");
                });

            modelBuilder.Entity("Alrazi.Models.StudentMotherMedical", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("ComplicationsDuringPregnancy")
                        .HasColumnType("bit");

                    b.Property<bool>("GotJaundice")
                        .HasColumnType("bit");

                    b.Property<bool>("GrowthComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNatural")
                        .HasColumnType("bit");

                    b.Property<string>("MonthMotherExposedRadiation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseryLong")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseryReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherProblem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PregnancyDuration")
                        .HasColumnType("int");

                    b.Property<string>("RhesusFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TookMedicationWhilePregnant")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("StudentMotherMedicals");
                });

            modelBuilder.Entity("Alrazi.Models.StudentNote", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("DescribeProblemAsSeenParents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyProblemsWithChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstDiscoveryParents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillsRequiredChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeakingWay")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentNotes");
                });

            modelBuilder.Entity("Alrazi.Models.StudentPotentialEnhancer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("Activity")
                        .HasColumnType("bit");

                    b.Property<bool>("Food")
                        .HasColumnType("bit");

                    b.Property<bool>("Materialism")
                        .HasColumnType("bit");

                    b.Property<bool>("Social")
                        .HasColumnType("bit");

                    b.Property<bool>("Symbolism")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("StudentPotentialEnhancers");
                });

            modelBuilder.Entity("Alrazi.Models.StudentPsychologyDevelopment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Allergy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EatProblems")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HyperActivity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageProblems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherProblems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutputOperations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seizures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SleepProblems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentPsychologyDevelopments");
                });

            modelBuilder.Entity("Alrazi.Models.StudentPsychologyDevelopmentBehavioralProblem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BehavioralProblemId")
                        .HasColumnType("int");

                    b.Property<int>("StudentPsychologyDevelopmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BehavioralProblemId");

                    b.HasIndex("StudentPsychologyDevelopmentId");

                    b.ToTable("StudentPsychologyDevelopmentBehavioralProblems");
                });

            modelBuilder.Entity("Alrazi.Models.StudentSibling", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("StudyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentSiblings");
                });

            modelBuilder.Entity("Alrazi.Models.StudentSocialDevelopment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ChildRelationships")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacialExpressions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseHelp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntentionalCommunication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interaction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Play")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisualCommunication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentSocialDevelopments");
                });

            modelBuilder.Entity("Alrazi.Models.StudentVisitCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentVisitCenters");
                });

            modelBuilder.Entity("Alrazi.Models.Employee", b =>
                {
                    b.HasOne("Alrazi.Models.Account", "Account")
                        .WithOne("Employee")
                        .HasForeignKey("Alrazi.Models.Employee", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Alrazi.Models.EmployeePermission", b =>
                {
                    b.HasOne("Alrazi.Models.Employee", "Employee")
                        .WithMany("EmployeePermissions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Alrazi.Models.Student", b =>
                {
                    b.HasOne("Alrazi.Models.AccessChannel", "AccessChannel")
                        .WithMany()
                        .HasForeignKey("AccessChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alrazi.Models.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alrazi.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessChannel");

                    b.Navigation("Diagnosis");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Alrazi.Models.StudentAbility", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentAcademic", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentAutonomy", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentDevelopment", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentEducationalَualification", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentFamilyActivity", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentFamilyInfo", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentInterests", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentLevelInfo", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentMedical", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentMedicalTest", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentMistake", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentMotherMedical", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentNote", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentPotentialEnhancer", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentPsychologyDevelopment", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentPsychologyDevelopmentBehavioralProblem", b =>
                {
                    b.HasOne("Alrazi.Models.BehavioralProblem", "BehavioralProblem")
                        .WithMany()
                        .HasForeignKey("BehavioralProblemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alrazi.Models.StudentPsychologyDevelopment", "StudentPsychologyDevelopment")
                        .WithMany()
                        .HasForeignKey("StudentPsychologyDevelopmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BehavioralProblem");

                    b.Navigation("StudentPsychologyDevelopment");
                });

            modelBuilder.Entity("Alrazi.Models.StudentSibling", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentSocialDevelopment", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.StudentVisitCenter", b =>
                {
                    b.HasOne("Alrazi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Alrazi.Models.Account", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("Alrazi.Models.Employee", b =>
                {
                    b.Navigation("EmployeePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
